/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WhatsAppVoiceSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  jarvisBotUrl: "",
  apiKey: "",
  syncFolder: "WhatsApp Voice Notes",
  autoSync: false,
  syncInterval: 5,
  includeTimestamp: true,
  dateFormat: "YYYY-MM-DD HH:mm"
};
var WhatsAppVoiceSyncPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.syncIntervalId = null;
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("microphone", "Sync WhatsApp Voice Notes", (evt) => {
      this.syncVoiceNotes();
    });
    this.addCommand({
      id: "sync-voice-notes",
      name: "Sync WhatsApp Voice Notes",
      callback: () => {
        this.syncVoiceNotes();
      }
    });
    this.addCommand({
      id: "select-sync-folder",
      name: "Select Sync Folder",
      callback: () => {
        this.selectSyncFolder();
      }
    });
    this.addSettingTab(new WhatsAppVoiceSyncSettingTab(this.app, this));
    if (this.settings.autoSync) {
      this.startAutoSync();
    }
  }
  onunload() {
    this.stopAutoSync();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.settings.autoSync) {
      this.stopAutoSync();
      this.startAutoSync();
    } else {
      this.stopAutoSync();
    }
  }
  startAutoSync() {
    if (this.syncIntervalId)
      return;
    this.syncIntervalId = window.setInterval(() => {
      this.syncVoiceNotes(true);
    }, this.settings.syncInterval * 60 * 1e3);
  }
  stopAutoSync() {
    if (this.syncIntervalId) {
      window.clearInterval(this.syncIntervalId);
      this.syncIntervalId = null;
    }
  }
  async selectSyncFolder() {
    const folders = this.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder);
    const folderNames = folders.map((folder) => folder.path);
    folderNames.unshift("");
    new import_obsidian.Notice(`Available folders: ${folderNames.join(", ")}`);
  }
  async syncVoiceNotes(isAutoSync = false) {
    if (!this.settings.jarvisBotUrl || !this.settings.apiKey) {
      if (!isAutoSync) {
        new import_obsidian.Notice("Please configure Jarvis Bot URL and API key in settings");
      }
      return;
    }
    try {
      if (!isAutoSync) {
        new import_obsidian.Notice("Syncing voice notes...");
      }
      console.log("Fetching voice notes from:", `${this.settings.jarvisBotUrl}/api/voice-notes/unprocessed`);
      const voiceNotes = await this.fetchVoiceNotes();
      console.log("Fetched voice notes:", voiceNotes);
      if (voiceNotes.length === 0) {
        console.log("No voice notes returned from API");
        if (!isAutoSync) {
          new import_obsidian.Notice("No new voice notes to sync");
        }
        return;
      }
      await this.ensureSyncFolderExists();
      let syncedCount = 0;
      for (const note of voiceNotes) {
        console.log("Processing voice note:", note.id);
        if (await this.saveVoiceNote(note)) {
          syncedCount++;
          console.log("Successfully saved voice note:", note.id);
          await this.markNoteAsProcessed(note.id);
          console.log("Marked as processed:", note.id);
        } else {
          console.log("Failed to save voice note:", note.id);
        }
      }
      if (!isAutoSync || syncedCount > 0) {
        new import_obsidian.Notice(`Synced ${syncedCount} voice note(s)`);
      }
    } catch (error) {
      console.error("Error syncing voice notes:", error);
      if (!isAutoSync) {
        new import_obsidian.Notice("Error syncing voice notes. Check console for details.");
      }
    }
  }
  async fetchVoiceNotes() {
    const response = await fetch(`${this.settings.jarvisBotUrl}/api/voice-notes/unprocessed`, {
      headers: {
        "Authorization": `Bearer ${this.settings.apiKey}`,
        "Content-Type": "application/json"
      }
    });
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return await response.json();
  }
  async markNoteAsProcessed(noteId) {
    await fetch(`${this.settings.jarvisBotUrl}/api/voice-notes/${noteId}/processed`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${this.settings.apiKey}`,
        "Content-Type": "application/json"
      }
    });
  }
  async ensureSyncFolderExists() {
    if (!this.settings.syncFolder)
      return;
    const folder = this.app.vault.getAbstractFileByPath(this.settings.syncFolder);
    if (!folder) {
      await this.app.vault.createFolder(this.settings.syncFolder);
    }
  }
  async saveVoiceNote(note) {
    try {
      const fileName = await this.generateFileName(note);
      const filePath = this.settings.syncFolder ? `${this.settings.syncFolder}/${fileName}` : fileName;
      console.log(`Generated file path: ${filePath}`);
      const existingFile = this.app.vault.getAbstractFileByPath(filePath);
      if (existingFile) {
        console.log(`Voice note already exists: ${filePath}`);
        return true;
      }
      const content = this.formatVoiceNote(note);
      console.log(`Creating file: ${filePath}`);
      await this.app.vault.create(filePath, content);
      console.log(`Successfully created file: ${filePath}`);
      return true;
    } catch (error) {
      console.error("Error saving voice note:", error);
      return false;
    }
  }
  async generateFileName(note) {
    const date = new Date(note.timestamp);
    const timestamp = this.formatDate(date);
    const shortId = note.id.substring(0, 8);
    const preview = note.transcription.substring(0, 30).replace(/[^\w\s-]/g, "").replace(/\s+/g, "-").toLowerCase();
    const sanitizedTimestamp = timestamp.replace(/[\\/:*?"<>|]/g, "-");
    return `voice-note-${sanitizedTimestamp}-${shortId}-${preview}.md`;
  }
  formatVoiceNote(note) {
    const date = new Date(note.timestamp);
    const formattedDate = this.formatDate(date);
    let content = "";
    if (this.settings.includeTimestamp) {
      content += `# Voice Note - ${formattedDate}

`;
      content += `**Date:** ${formattedDate}
`;
      content += `**Source:** WhatsApp (${note.phone})
`;
      content += `**ID:** ${note.id}

`;
    }
    content += `## Transcription

`;
    content += note.transcription;
    content += `

---
`;
    content += `*Synced from WhatsApp Voice Notes*`;
    return content;
  }
  formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return this.settings.dateFormat.replace("YYYY", year.toString()).replace("MM", month).replace("DD", day).replace("HH", hours).replace("mm", minutes);
  }
};
var WhatsAppVoiceSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "WhatsApp Voice Sync Settings" });
    new import_obsidian.Setting(containerEl).setName("Jarvis Bot URL").setDesc("Base URL of your Jarvis Bot instance").addText((text) => text.setPlaceholder("https://your-jarvis-bot.workers.dev").setValue(this.plugin.settings.jarvisBotUrl).onChange(async (value) => {
      this.plugin.settings.jarvisBotUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("API key for accessing Jarvis Bot").addText((text) => text.setPlaceholder("your-api-key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Folder").setDesc("Folder to save voice notes (leave empty for root)").addText((text) => text.setPlaceholder("WhatsApp Voice Notes").setValue(this.plugin.settings.syncFolder).onChange(async (value) => {
      this.plugin.settings.syncFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto Sync").setDesc("Automatically sync voice notes at regular intervals").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSync).onChange(async (value) => {
      this.plugin.settings.autoSync = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Interval").setDesc("How often to sync (minutes)").addSlider((slider) => slider.setLimits(1, 60, 1).setValue(this.plugin.settings.syncInterval).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.syncInterval = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include Timestamp").setDesc("Include timestamp and metadata in voice notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTimestamp).onChange(async (value) => {
      this.plugin.settings.includeTimestamp = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Format for timestamps (YYYY-MM-DD HH:mm)").addText((text) => text.setPlaceholder("YYYY-MM-DD HH:mm").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Manual Sync").setDesc("Manually sync voice notes now").addButton((button) => button.setButtonText("Sync Now").onClick(async () => {
      await this.plugin.syncVoiceNotes();
    }));
  }
};
